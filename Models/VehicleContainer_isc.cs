//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Diagnostics;
using System.Runtime.Serialization;
using System.Xml.Serialization;

// 
// Этот исходный код был создан с помощью xsd, версия=4.6.1055.0.
// 
namespace Models
{


    /// <remarks/>
    [Serializable()]
    //[XmlRoot(Namespace = "http://tempuri.org/", IsNullable = true)]
    [XmlRoot(IsNullable = true)]
    public partial class VehicleContainer : Container
    {
        /// <remarks/>
        [DataMember(EmitDefaultValue = false)]
        [XmlArray("Binaries")]
        [XmlArrayItem("BinaryContainer")]
        public BinaryContainer[] Binaries { get; set; }

        [DataMember()]
        [XmlElement("ChannelNumber", DataType = "int", Type = typeof(int))]
        /// <remarks/>
        public int ChannelNumber { get; set;}

        [DataMember()]
        [XmlElement("LaneNumber")]
        /// <remarks/>
        public int LaneNumber { get; set; }
        [System.Runtime.Serialization.DataMemberAttribute(IsRequired = true)]
        public Direction Direction
        {
            get;
            set;
        }
        [DataMember()]
        [XmlElement("Credence", DataType = "int", Type = typeof(int))]
        /// <remarks/>
        public int Credence { get; set; }

        [DataMember()]
        [XmlElement("CredenceExceeded")]
        public string CredenceExceeded { get; set; }
        public int CodeInt { get {
                if (int.TryParse(this.CredenceExceeded, out int rez))
                { return rez; }
                return 0;
            } }
        //[DataMember()]
        //[XmlElement("CredenceExceeded")]
        //public Boolean CredenceExceeded { get; set; }
        //[DataMember()]
        //[XmlElement("CredenceExceeded")]
        //public int CredenceExceeded { get; set; }

        [DataMember(IsRequired = false)]
        [XmlElement("LocationLatitude")]
        public string LocationLatitude { get; set; }
        [DataMember(IsRequired = false)]
        [XmlElement("LocationLongitude")]
        public string LocationLongitude { get; set; }
        [DataMember(IsRequired = false)]
        [XmlElement("LocationAltitude")]
        public string LocationAltitude { get; set; }


        //[DataMember(EmitDefaultValue = false)]
        //[XmlElement("Heading", DataType = "date", Type = typeof(DateTime?), IsNullable = true)]
        //public DateTime? Heading { get; set; }
        //[DataMember(EmitDefaultValue = false)]
        //[XmlElement("Gap", DataType = "date", Type = typeof(DateTime?), IsNullable =true)]
        //public DateTime? Gap { get; set; }
        [DataMember()]
        [XmlElement("Speed")]
        public double Speed { get; set; }
        [DataMember()]
        [XmlElement("SpeedDifference")]
        public double SpeedDifference { get; set; }
        [DataMember(IsRequired = true)]
        [XmlElement("Length", DataType = "int", Type = typeof(int))]
        public int Length {get;set;}
        [DataMember(IsRequired = true)]
        [XmlElement("Width", DataType = "int", Type = typeof(int))]
        public int Width { get; set; }
        [DataMember(IsRequired = true)]
        [XmlElement("Height", DataType = "int", Type = typeof(int))]
        public int Height { get; set; }
        [DataMember()]
        [XmlElement("PositionLeft", DataType = "int", Type = typeof(int))]
        public int PositionLeft { get; set; }
        [DataMember()]
        [XmlElement("PositionRight", DataType = "int", Type = typeof(int))]
        public int PositionRight { get; set; }
        [DataMember(EmitDefaultValue = false)]
        public Classification[] Classification { get; set;}

        [DataMember(EmitDefaultValue = false)]
        [XmlElement("VehicleTypeName", DataType = "string", Type = typeof(string))]
        public string VehicleTypeName { get; set; }

        [DataMember()]
        [XmlElement("Units", DataType = "int", Type = typeof(int))]
        public int Units { get; set; }

        [DataMember()]
        [XmlElement("WheelBase", DataType = "int", Type = typeof(int))]
        public int WheelBase { get; set; }
        [DataMember()]
        [XmlElement("Weight", DataType = "int", Type = typeof(int))]
        public int Weight { get; set; }
        [DataMember()]
        [XmlElement("WeightLimit", DataType = "int", Type = typeof(int))]
        public int WeightLimit { get; set; }

        [DataMember()]
        [XmlElement("Overweight", DataType = "int", Type = typeof(int))]
        public int Overweight { get; set; }
        [DataMember()]
        [XmlElement("AxleCount", DataType = "int", Type = typeof(int))]
        public int AxleCount { get; set; }

        [DataMember(EmitDefaultValue = false)]
        public AxleContainer[] Axles { get; set; }

        [DataMember(EmitDefaultValue = true)]
        [XmlElement("Plate", DataType = "string", Type = typeof(string))]
        public string Plate { get; set; }

        [DataMember(IsRequired = true)]
        [XmlElement("PlateConfidence")]
        public double PlateConfidence { get; set; }

        [DataMember(IsRequired = true)]
        [XmlElementAttribute(IsNullable = true)]
        public System.Nullable<bool> PlateValid { get; set; }

        [DataMember(EmitDefaultValue = false)]
        [XmlElement("PlateRear", DataType = "string", Type = typeof(string))]
        /// <remarks/>
        public string PlateRear { get; set; }

        [DataMember(IsRequired = true)]
        [XmlElement("PlateRearConfidence")]
        /// <remarks/>
        public double PlateRearConfidence { get; set; }
        [DataMember(IsRequired = true)]
        [XmlElement(IsNullable = true)]
        public System.Nullable<bool> PlateRearValid
        {
            get;
            set;
        }

        [DataMember(EmitDefaultValue = false)]
        [XmlElement("CountryCode", DataType = "string", Type = typeof(string))]
        public string CountryCode { get; set; }

        [DataMember(EmitDefaultValue = false)]
        [XmlElement("string", DataType = "string", Type = typeof(string))]
        public string CountrySubdivisionCode {get;set;}

        [DataMember(IsRequired = true)]
        [XmlElement("CountryConfidence")]
        public double CountryConfidence {get;set;}

        [DataMember(IsRequired = true)]
        [XmlElement("AdrFrontEmpty")]
        public bool AdrFrontEmpty {get;set;}

        [DataMember(EmitDefaultValue = false)]
        [XmlElement("AdrFrontKemler", DataType = "string", Type = typeof(string))]
        public string AdrFrontKemler { get; set; }

        [DataMember(EmitDefaultValue = false)]
        [XmlElement("AdrFrontUn", DataType = "string", Type = typeof(string))]
        public string AdrFrontUn { get; set; }

        [DataMember(IsRequired = true)]
        [XmlElement("AdrFrontConfidence")]
        public double AdrFrontConfidence { get; set; }

        [DataMember()]
        [XmlElement("AdrRearEmpty")]
        public bool AdrRearEmpty {get;set;}
        [DataMember(EmitDefaultValue = true)]
        [XmlElement("AdrRearKemler")]
        public string AdrRearKemler {get;set;}
        [DataMember(EmitDefaultValue = true)]
        [XmlElement("AdrRearUn")]
        public string AdrRearUn { get; set;}
        [DataMember()]
        [XmlElement("AdrRearConfidence")]
        public double AdrRearConfidence {get;set;}
        [DataMember()]
        [XmlElement("IsOverweightPartial")]
        public bool IsOverweightPartial { get; set;}
        [DataMember()]
        [XmlElement("IsOverweightPartialGroup")]
        public bool IsOverweightPartialGroup { get; set; }
        [DataMember()]
        [XmlElement("IsOverweightGross")]
        public bool IsOverweightGross
        {
            get;
            set;
        }
        [DataMember()]
        [XmlElement("IsExceededLength")]
        public bool IsExceededLength { get; set;}
        [DataMember()]
        [XmlElement("IsExceededWidth")]
        public bool IsExceededWidth { get;set; }
        [DataMember()]
        [XmlElement("IsExceededHeight")]
        public bool IsExceededHeight { get; set; }
        [DataMember()]
        [XmlElement("IsOverspeed")]
        public bool IsOverspeed { get;set;}
        [DataMember()]
        [XmlElement("IsWrongDirection")]
        public bool IsWrongDirection { get; set; }
        [DataMember()]
        [XmlElement("IsNonStandard")]
        public bool IsNonStandard{ get;set; }
        [DataMember()]
        [XmlElement("OperatingRangeExceededSpeed")]
        public bool OperatingRangeExceededSpeed {get;set;}
        [DataMember()]
        [XmlElement("OperatingRangeExceededWeight")]
        public bool OperatingRangeExceededWeight { get; set; }
        [DataMember()]
        [XmlElement("Divert")]
        public bool Divert { get; set;}
        [DataMember()]
        [XmlElement("Diverted")]
        public bool Diverted { get; set;}
        [DataMember()]
        [XmlElement("Checksum")]
        public ulong Checksum{get;set;}
        
    }

    [Serializable()]
    [DataContractAttribute(Name = "BinaryContainer")]
    public partial class BinaryContainer : Container
    {

        [DataMember(IsRequired = true)]        
        /// <remarks/>
        public BinaryContainerType BinaryType { get;set;}
        [DataMember(EmitDefaultValue = false)]
        /// <remarks/>
        public string Name {get;set;}
        [DataMember(IsRequired = true)]
        public ulong Length {get;set;}

        [DataMember(EmitDefaultValue = false)]
        [XmlElement(DataType = "base64Binary")]
        public byte[] Data { get; set; }
        [DataMember(EmitDefaultValue = false)]
        [XmlElement(DataType = "base64Binary")]
        public byte[] Hash { get; set;}
    }

    [Serializable()]
    [DataContract(Name = "BinaryContainerType")]
    public enum BinaryContainerType
    {
        [EnumMember()]
        Unknown,
        [EnumMember()]
        ImageBmp,
        [EnumMember()]
        ImageEmf,
        [EnumMember()]
        ImageExif,
        [EnumMember()]
        ImageGif,
        [EnumMember()]
        ImageIcon,
        [EnumMember()]
        ImageJpeg,
        [EnumMember()]
        ImageMemoryBmp,
        [EnumMember()]
        ImagePng,
        [EnumMember()]
        ImageTiff,
        [EnumMember()]
        ImageWmf,
        [EnumMember()]
        VideoAvi,
        [EnumMember()]
        VideoWebm,
        [EnumMember()]
        VideoMkv,
        [EnumMember()]
        VideoMp4,
    }

    /// <remarks/>
    [XmlInclude(typeof(AxleContainer))]
    [XmlInclude(typeof(BinaryContainer))]
    [XmlInclude(typeof(VehicleContainer))]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [Serializable()]
    [DebuggerStepThrough()]
    [DataContract(Name = "Container")]
    [KnownType(typeof(AxleContainer))]
    [KnownType(typeof(BinaryContainer))]
    [KnownType(typeof(VehicleContainer))]
    public partial class Container
    {


        [DataMember()]
        [XmlElement]
        /// <remarks/>
        public ulong ID {get;set;}
        //[DataMember(EmitDefaultValue = false, Order = 1)]
        public BGuid CreatedBy { get; set;}
        [DataMember()]
        [XmlElement]
        public System.DateTime Created
        {
            get;
            set;
        }
        [DataMember(EmitDefaultValue = false)]
        public string[] Captions { get; set;}
        [DataMember(EmitDefaultValue = false)]
        public ContainerExtension[] Extensions { get; set; }
    }

    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "BGuid")]
    public partial class BGuid
    {

        [DataMember(IsRequired = true)]
        public uint PlatformId
        {
            get;
            set;
        }

        [DataMember(IsRequired = true)]
        /// <remarks/>
        public ushort BGuidType
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public ushort KeyMark
        {
            get;
            set;
        }

        [DataMember(IsRequired = true)]
        /// <remarks/>
        public ulong ID
        {
            get;
            set;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [DataContract(Name = "Classification")]
    public partial class Classification
    {
        [DataMember(EmitDefaultValue = false)]
        public string Schema
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        public int Index
        {
            get;
            set;
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("xsd", "4.6.1055.0")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Runtime.Serialization.DataContractAttribute(Name = "TimeSpan")]
    public partial class TimeSpan
    {
    }

    /// <remarks/>
    [Serializable()]
    [DataContract(Name = "ContainerExtension")]
    public partial class ContainerExtension
    {

        [DataMember(EmitDefaultValue = false)]
        public string Name
        {
            get;
            set;
        }

        [DataMember(EmitDefaultValue = false)]
        public Container Container
        {
            get;
            set;
        }
    }

    [Serializable()]
    [DataContract(Name = "AxleContainer")]
    public partial class AxleContainer : Container
    {

        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int Index
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int Unit
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int Group
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int Position
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int Weight
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int WeightLeft
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int WeightRight
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int WeightLimit
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int WheelCount
        {
            get;
            set;
        }
        [DataMember(IsRequired = true)]
        /// <remarks/>
        public int FootprintWidthLeft
        {
            get; set;
        }
        [DataMember(IsRequired = true)]
        public int FootprintWidthRight { get; set; }
        [DataMember(IsRequired = true)]
        public bool IsOverweight { get; set; }
        [DataMember()]
        public double Speed { get; set; }
        [DataMember()]
        public int Credence { get; set; }
        [DataMember(IsRequired = true)]
        public AxleMeasurementStatus MeasurementStatus { get; set; }

        [DataMember(EmitDefaultValue = false)]
        [XmlElement(DataType = "base64Binary")]
        public byte[] WheelPairing { get; set; }
    }

    [Serializable()]
    [DataContract(Name = "AxleMeasurementStatus")]
    public enum AxleMeasurementStatus
    {
        [EnumMember()]
        Unknown,
        [EnumMember()]
        Correct,
        [EnumMember()]
        WeightLimitUnder,
        [EnumMember()]
        WeightLimitOver,
        [EnumMember()]
        SpeedLimitUnder,
        [EnumMember()]
        SpeedLimitOver,
        [EnumMember()]
        Error,
    }

    [Serializable()]
    [DataContract(Name = "Direction")]
    public enum Direction
    {
        [EnumMember()]
        Unknown,
        [EnumMember()]
        Ahead,
        [EnumMember()]
        Back,
    }
}
